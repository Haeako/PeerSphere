from fastapi import FastAPI, Request, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Dict, Optional, Any
import uvicorn
import json
import random
from pathlib import Path
from chatbot import GeminiChatBot
import asyncio

QUIZ_DATA_PATH = Path("data/quiz_data.json")

# H√†m load d·ªØ li·ªáu t·ª´ JSON
def load_quiz_data() -> Dict[int, dict]:
    with open(QUIZ_DATA_PATH, "r", encoding="utf-8") as f:
        data = json.load(f)
    # chuy·ªÉn key string -> int
    return {int(k): v for k, v in data.items()}

# X√°o tr·ªôn th·ª© t·ª± ƒë√°p √°n cho m·ªôt c√¢u h·ªèi
def shuffle_options(options: Dict[str, str]) -> Dict[str, str]:
    # L·∫•y c√°c c·∫∑p key-value
    items = list(options.items())
    # X√°o tr·ªôn th·ª© t·ª± c√°c c·∫∑p
    random.shuffle(items)
    # T·∫°o dictionary m·ªõi v·ªõi th·ª© t·ª± ƒë√£ x√°o tr·ªôn
    return dict(items)

# Ch·ªçn ng·∫´u nhi√™n √¢n s·ªë c√¢u h·ªèi (m·∫∑c ƒë·ªãnh 10) v√† x√°o tr·ªôn ƒë√°p √°n
def get_randomized_questions(limit: int = 10) -> Dict[int, Dict[str, Any]]:
    quiz_data: Dict[int, dict] = load_quiz_data()

    # L·∫•y t·∫•t c·∫£ org_id, r·ªìi x√°o tr·ªôn
    all_ids = list(quiz_data.keys())
    random.shuffle(all_ids)

    # L·∫•y ng·∫´u nhi√™n limit c√¢u
    selected_ids = all_ids[:min(limit, len(all_ids))]

    # Sau ƒë√≥ s·∫Øp x·∫øp l·∫°i theo org_id tƒÉng d·∫ßn
    selected_ids.sort()

    out: Dict[int, Dict[str, Any]] = {}
    for idx, orig_id in enumerate(selected_ids, start=1):
        q = quiz_data[orig_id]
        shuffled_options = shuffle_options(q["options"])
        out[idx] = {
            "id": idx,
            "original_id": orig_id,
            "question": q["question"],
            "options": shuffled_options,
            "scores": q.get("scores", {})
        }

    return out

# Kh·ªüi t·∫°o FastAPI
app = FastAPI(title="PeerSphereüíó - Student Support Platform")
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
chatbot = GeminiChatBot()

# Pydantic models
class QuizAnswer(BaseModel):
    question_id: int    # original_id
    answer: str         # full text c·ªßa ƒë√°p √°n

class QuizSubmission(BaseModel):
    answers: List[QuizAnswer]

class QuizResult(BaseModel):
    total_score: int
    assessment: str
    detailed_scores: Dict[int, int]
    detailed_answers: Optional[Dict[int, str]] = None

class ChatMessage(BaseModel):
    message: str

# Kho·∫£ng ƒëi·ªÉm ƒë√°nh gi√°
assessment_ranges = [
    {"min": 25, "max": 30, "assessment": "B·∫°n ki·ªÉm so√°t r·∫•t t·ªët √°p l·ª±c ƒë·ªìng trang l·ª©a."},
    {"min": 18, "max": 24, "assessment": "B·∫°n c√≥ m·ªôt s·ªë √°p l·ª±c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c s·ª± c√¢n b·∫±ng."},
    {"min": 10, "max": 17, "assessment": "B·∫°n ƒëang b·ªã ·∫£nh h∆∞·ªüng ƒë√°ng k·ªÉ b·ªüi √°p l·ª±c ƒë·ªìng trang l·ª©a."},
    {"min": 0,  "max": 9,  "assessment": "B·∫°n c√≥ th·ªÉ ƒëang ch·ªãu √°p l·ª±c l·ªõn v√† c·∫ßn t√¨m c√°ch gi·∫£i t·ªèa."}
]

# Qu·∫£n l√Ω WebSocket chat
class ConnectionManager:
    def __init__(self):
        self.active: List[WebSocket] = []

    async def connect(self, ws: WebSocket):
        await ws.accept()
        self.active.append(ws)

    def disconnect(self, ws: WebSocket):
        if ws in self.active:
            self.active.remove(ws)

    async def send(self, msg: str, ws: WebSocket):
        await ws.send_text(msg)

manager = ConnectionManager()

# --- Routes HTML ---
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("home.html", {"request": request})

@app.get("/quiz", response_class=HTMLResponse)
async def quiz_page(request: Request):
    return templates.TemplateResponse("quiz.html", {"request": request})

@app.get("/chat", response_class=HTMLResponse)
async def chat_page(request: Request):
    return templates.TemplateResponse("chat.html", {"request": request})

# --- API Endpoints ---
@app.get("/api/original-questions")
async def original_questions():
    return load_quiz_data()

@app.get("/api/questions")
async def api_questions():
    return JSONResponse(content=get_randomized_questions())

@app.post("/api/chat", response_model=dict)
async def api_chat(msg: ChatMessage):
    try:
        return {"status": "success", "message": chatbot.responses(msg.message)}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.websocket("/ws/chat")
async def websocket_chat(ws: WebSocket):
    await manager.connect(ws)
    try:
        while True:
            data = await ws.receive_text()
            response = chatbot.responses(data)
            
            # G·ª≠i t·ª´ng k√Ω t·ª± m·ªôt ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng g√µ
            for char in response:
                await ws.send_text(char)
                await asyncio.sleep(0.015) 
            
            # G·ª≠i k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ ƒë√°nh d·∫•u k·∫øt th√∫c tin nh·∫Øn
            await ws.send_text("\n<message_end>")
    except WebSocketDisconnect:
        manager.disconnect(ws)

@app.post("/api/submit", response_model=QuizResult)
async def submit_quiz(submission: QuizSubmission):
    quiz_data = load_quiz_data()
    total = 0
    detailed_scores: Dict[int,int] = {}
    detailed_answers: Dict[int,str] = {}

    for ans in submission.answers:
        qid = ans.question_id
        chosen_text = ans.answer

        if qid not in quiz_data:
            raise HTTPException(400, f"C√¢u h·ªèi ID={qid} kh√¥ng t·ªìn t·∫°i.")

        question = quiz_data[qid]
        # Ki·ªÉm tra ƒë√°p √°n h·ª£p l·ªá
        if chosen_text not in question["options"].values():
            raise HTTPException(400, f"ƒê√°p √°n kh√¥ng h·ª£p l·ªá cho c√¢u h·ªèi {qid}.")

        # L·∫•y ƒëi·ªÉm
        score = question["scores"].get(chosen_text)
        if score is None or not isinstance(score, int):
            raise HTTPException(400, f"L·ªói l·∫•y ƒëi·ªÉm cho ƒë√°p √°n c√¢u h·ªèi {qid}.")

        # Ghi nh·∫≠n
        total += score
        detailed_scores[qid] = score
        # L∆∞u l·∫°i letter A/B/C/D
        letter = next(k for k,v in question["options"].items() if v == chosen_text)
        detailed_answers[qid] = letter

    # ƒê√°nh gi√° t·ªïng th·ªÉ
    assessment = ""
    for r in assessment_ranges:
        if r["min"] <= total <= r["max"]:            
            assessment = r["assessment"]
            break

    return QuizResult(
        total_score=total,
        assessment=assessment,
        detailed_scores=detailed_scores,
        detailed_answers=detailed_answers
    )

@app.get("/result", response_class=HTMLResponse)
async def result_page(request: Request, score: int, assessment: str):
    return templates.TemplateResponse(
        "result.html",
        {"request": request, "score": score, "assessment": assessment}
    )

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)