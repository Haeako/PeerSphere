from fastapi import FastAPI, Request, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Dict, Optional, Any
import uvicorn
import json
import random
from pathlib import Path
from chatbot import GeminiChatBot
import asyncio

# C·∫•u h√¨nh c√°c file JSON t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng option
JSON_FILES = {
    "study": "data/study.json",
    "finace": "data/taichinh.json", 
    "nghinh": "data/nghinh.json",
    "hobby": "data/sothich.json",
    "lifestyle": "data/mck.json"
}

# Assessment ranges cho t·ª´ng lo·∫°i quiz
ASSESSMENT_CONFIGS = {
    "study": [
        {"min": 25, "max": 30, "assessment": "B·∫°n ki·ªÉm so√°t r·∫•t t·ªët √°p l·ª±c ƒë·ªìng trang l·ª©a."},
        {"min": 18, "max": 24, "assessment": "B·∫°n c√≥ m·ªôt s·ªë √°p l·ª±c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c s·ª± c√¢n b·∫±ng."},
        {"min": 10, "max": 17, "assessment": "B·∫°n ƒëang b·ªã ·∫£nh h∆∞·ªüng ƒë√°ng k·ªÉ b·ªüi √°p l·ª±c ƒë·ªìng trang l·ª©a."},
        {"min": 0,  "max": 9,  "assessment": "B·∫°n c√≥ th·ªÉ ƒëang ch·ªãu √°p l·ª±c l·ªõn v√† c·∫ßn t√¨m c√°ch gi·∫£i t·ªèa."}
    ],
    "finace": [
        {"min": 25, "max": 30, "assessment": "B·∫°n r·∫•t t·ª± tin, kh√¥ng b·ªã √°p l·ª±c v·ªÅ t√†i ch√≠nh khi so s√°nh v·ªõi b·∫°n b√®."},
        {"min": 18, "max": 24, "assessment": "B·∫°n c√≥ ch√∫t √°p l·ª±c nh∆∞ng bi·∫øt c√°ch ki·ªÉm so√°t v√† kh√¥ng ·∫£nh h∆∞·ªüng nhi·ªÅu ƒë·∫øn t√¢m tr·∫°ng."},
        {"min": 10, "max": 17, "assessment": "B·∫°n c·∫£m th·∫•y √°p l·ª±c kh√° nhi·ªÅu v·ªÅ t√†i ch√≠nh, ƒë√¥i khi b·ªã ·∫£nh h∆∞·ªüng t√¢m l√Ω"},
        {"min": 0,  "max": 9,  "assessment": "B·∫°n b·ªã √°p l·ª±c t√†i ch√≠nh ƒë·ªìng trang l·ª©a l·ªõn, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng x·∫•u ƒë·∫øn tinh th·∫ßn v√† t·ª± tin."}
    ],
    "nghinh": [
        {"min": 27, "max": 30, "assessment": "B·∫°n r·∫•t t·ª± tin v·ªÅ ngo·∫°i h√¨nh, √≠t b·ªã √°p l·ª±c t·ª´ b·∫°n b√®."},
        {"min": 20, "max": 26, "assessment": "B·∫°n c√≥ ch√∫t √°p l·ª±c nh∆∞ng ki·ªÉm so√°t t·ªët c·∫£m x√∫c v√† h√¨nh ·∫£nh c·ªßa m√¨nh."},
        {"min": 10, "max": 19, "assessment": "B·∫°n ch·ªãu √°p l·ª±c kh√° nhi·ªÅu, c√≥ l√∫c c·∫£m th·∫•y thi·∫øu t·ª± tin v·ªÅ ngo·∫°i h√¨nh."},
        {"min": 0,  "max": 9,  "assessment": "B·∫°n ch·ªãu √°p l·ª±c l·ªõn, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ti√™u c·ª±c ƒë·∫øn s·ª©c kh·ªèe t√¢m th·∫ßn."}
    ],
    "hobby": [
        {"min": 27, "max": 30, "assessment": "B·∫°n r·∫•t t·ª± tin v·ªõi s·ªü th√≠ch v√† th√≥i quen c·ªßa m√¨nh, kh√¥ng b·ªã √°p l·ª±c t·ª´ b·∫°n b√®."},
        {"min": 20, "max": 26, "assessment": "B·∫°n c√≥ ch√∫t √°p l·ª±c nh∆∞ng ki·ªÉm so√°t t·ªët v√† duy tr√¨ s·ª± c√¢n b·∫±ng."},
        {"min": 10, "max": 19, "assessment": "B·∫°n ch·ªãu √°p l·ª±c kh√° nhi·ªÅu v√† ƒë√¥i khi c·∫£m th·∫•y kh√≥ khƒÉn v·ªõi s·ª± kh√°c bi·ªát."},
        {"min": 0,  "max": 9,  "assessment": "B·∫°n b·ªã √°p l·ª±c l·ªõn, c·∫£m th·∫•y kh√≥ h√≤a nh·∫≠p v√† thi·∫øu t·ª± tin v·ªõi s·ªü th√≠ch, th√≥i quen c√° nh√¢n."}
    ],
    "lifestyle": [
        {"min": 25, "max": 30, "assessment": "B·∫°n r·∫•t t·ª± tin v·ªõi phong c√°ch s·ªëng c√° nh√¢n, √≠t b·ªã √°p l·ª±c t·ª´ b·∫°n b√®."},
        {"min": 18, "max": 24, "assessment": "B·∫°n c√≥ ch√∫t √°p l·ª±c nh∆∞ng ki·ªÉm so√°t t·ªët c·∫£m x√∫c v√† gi·ªØ s·ª± c√¢n b·∫±ng."},
        {"min": 10, "max": 17, "assessment": "B·∫°n ch·ªãu √°p l·ª±c kh√° nhi·ªÅu v√† ƒë√¥i khi kh√≥ gi·ªØ v·ªØng b·∫£n th√¢n."},
        {"min": 0,  "max": 9,  "assessment": "B·∫°n b·ªã √°p l·ª±c l·ªõn, c·∫£m th·∫•y kh√≥ h√≤a nh·∫≠p v√† thi·∫øu t·ª± tin."}
    ]
}

# H√†m load d·ªØ li·ªáu t·ª´ JSON v·ªõi option
def load_quiz_data(quiz_type: str = "study") -> Dict[int, dict]:
    if quiz_type not in JSON_FILES:
        raise ValueError(f"Quiz type '{quiz_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c lo·∫°i c√≥ s·∫µn: {list(JSON_FILES.keys())}")
    
    file_path = Path(JSON_FILES[quiz_type])
    if not file_path.exists():
        raise FileNotFoundError(f"File {file_path} kh√¥ng t·ªìn t·∫°i.")
    
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    # chuy·ªÉn key string -> int
    return {int(k): v for k, v in data.items()}

# X√°o tr·ªôn th·ª© t·ª± ƒë√°p √°n cho m·ªôt c√¢u h·ªèi
def shuffle_options(options: Dict[str, str]) -> Dict[str, str]:
    # L·∫•y c√°c c·∫∑p key-value
    items = list(options.items())
    # X√°o tr·ªôn th·ª© t·ª± c√°c c·∫∑p
    random.shuffle(items)
    # T·∫°o dictionary m·ªõi v·ªõi th·ª© t·ª± ƒë√£ x√°o tr·ªôn
    return dict(items)

# Ch·ªçn ng·∫´u nhi√™n s·ªë c√¢u h·ªèi (m·∫∑c ƒë·ªãnh 10) v√† x√°o tr·ªôn ƒë√°p √°n
def get_randomized_questions(quiz_type: str = "study", limit: int = 10) -> Dict[int, Dict[str, Any]]:
    quiz_data: Dict[int, dict] = load_quiz_data(quiz_type)

    # L·∫•y t·∫•t c·∫£ org_id, r·ªìi x√°o tr·ªôn
    all_ids = list(quiz_data.keys())
    random.shuffle(all_ids)

    # L·∫•y ng·∫´u nhi√™n limit c√¢u
    selected_ids = all_ids[:min(limit, len(all_ids))]

    # B·ªé D√íNG N√ÄY N·∫æU MU·ªêN TH·ª® T·ª∞ C√ÇU H·ªéI CH·ªåN RA C≈®NG NG·∫™U NHI√äN
    # selected_ids.sort() # <<<< B·ªé D√íNG N√ÄY

    out: Dict[int, Dict[str, Any]] = {}
    # idx s·∫Ω l√† 1, 2, 3,... theo th·ª© t·ª± trong selected_ids (ƒë√£ ƒë∆∞·ª£c shuffle ho·∫∑c shuffle r·ªìi sort)
    for idx, orig_id in enumerate(selected_ids, start=1):
        q = quiz_data[orig_id]
        shuffled_options = shuffle_options(q["options"])
        out[idx] = {
            "id": idx, # ƒê√¢y l√† ID m·ªõi c·ªßa c√¢u h·ªèi trong quiz hi·ªán t·∫°i (1, 2, 3,...)
            "original_id": orig_id, # ƒê√¢y l√† ID g·ªëc c·ªßa c√¢u h·ªèi trong file JSON
            "question": q["question"],
            "options": shuffled_options,
            "scores": q.get("scores", {}),
            "quiz_type": quiz_type
        }

    return out

# L·∫•y assessment ranges theo quiz type
def get_assessment_ranges(quiz_type: str) -> List[Dict]:
    return ASSESSMENT_CONFIGS.get(quiz_type, ASSESSMENT_CONFIGS["study"])

# Kh·ªüi t·∫°o FastAPI
app = FastAPI(title="PeerSphereüíó - Student Support Platform")
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
chatbot = GeminiChatBot()

# Pydantic models
class QuizAnswer(BaseModel):
    question_id: int    # original_id
    answer: str         # full text c·ªßa ƒë√°p √°n

class QuizSubmission(BaseModel):
    answers: List[QuizAnswer]
    quiz_type: Optional[str] = "study"  # Th√™m quiz_type v√†o submission

class QuizResult(BaseModel):
    total_score: int
    assessment: str
    detailed_scores: Dict[int, int]
    detailed_answers: Optional[Dict[int, str]] = None
    quiz_type: str

class ChatMessage(BaseModel):
    message: str

# Qu·∫£n l√Ω WebSocket chat
class ConnectionManager:
    def __init__(self):
        self.active: List[WebSocket] = []

    async def connect(self, ws: WebSocket):
        await ws.accept()
        self.active.append(ws)

    def disconnect(self, ws: WebSocket):
        if ws in self.active:
            self.active.remove(ws)

    async def send(self, msg: str, ws: WebSocket):
        await ws.send_text(msg)

manager = ConnectionManager()

# --- Routes HTML ---
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("home.html", {"request": request})

@app.get("/quiz", response_class=HTMLResponse)
async def quiz_page(request: Request, quiz_type: str = "study"):
    # Ki·ªÉm tra quiz_type h·ª£p l·ªá
    if quiz_type not in JSON_FILES:
        raise HTTPException(status_code=400, detail=f"Quiz type '{quiz_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
    
    return templates.TemplateResponse("quiz.html", {
        "request": request, 
        "quiz_type": quiz_type,
        "available_types": list(JSON_FILES.keys())
    })

@app.get("/chat", response_class=HTMLResponse)
async def chat_page(request: Request):
    return templates.TemplateResponse("chat.html", {"request": request})

# --- API Endpoints ---
@app.get("/api/quiz-types")
async def get_quiz_types():
    """L·∫•y danh s√°ch c√°c lo·∫°i quiz c√≥ s·∫µn"""
    return {
        "available_types": list(JSON_FILES.keys()),
        "descriptions": {
            "study": "ƒê√°nh gi√° √°p l·ª±c h·ªçc t·∫≠p",
            "finace": "ƒê√°nh gi√° √°p l·ª±c v·ªÅ t√†i ch√≠nh", 
            "nghinh": "ƒê√°nh gi√° √°p l·ª±c v·ªÅ ngo·∫°i h√¨nh",
            "hobby": "ƒê√°nh gi√° √°p l·ª±c v·ªÅ s·ªü th√≠ch",
            "lifestyle": "ƒê√°nh gi√° √°p l·ª±c v·ªÅ phong c√°ch s·ªëng"
        }
    }

@app.get("/api/original-questions")
async def original_questions(quiz_type: str = "study"):
    """L·∫•y c√¢u h·ªèi g·ªëc theo lo·∫°i quiz"""
    try:
        return load_quiz_data(quiz_type)
    except (ValueError, FileNotFoundError) as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/api/questions")
async def api_questions(quiz_type: str = "study", limit: int = 10):
    """L·∫•y c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√°o tr·ªôn theo lo·∫°i quiz"""
    try:
        return JSONResponse(content=get_randomized_questions(quiz_type, limit))
    except (ValueError, FileNotFoundError) as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/chat", response_model=dict)
async def api_chat(msg: ChatMessage):
    try:
        return {"status": "success", "message": chatbot.responses(msg.message)}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.websocket("/ws/chat")
async def websocket_chat(ws: WebSocket):
    await manager.connect(ws)
    try:
        while True:
            data = await ws.receive_text()
            response = chatbot.responses(data)
            
            # G·ª≠i t·ª´ng k√Ω t·ª± m·ªôt ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng g√µ
            for char in response:
                await ws.send_text(char)
                await asyncio.sleep(0.015) 
            
            # G·ª≠i k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ ƒë√°nh d·∫•u k·∫øt th√∫c tin nh·∫Øn
            await ws.send_text("\n<message_end>")
    except WebSocketDisconnect:
        manager.disconnect(ws)

@app.post("/api/submit", response_model=QuizResult)
async def submit_quiz(submission: QuizSubmission):
    quiz_type = submission.quiz_type or "study"
    
    try:
        quiz_data = load_quiz_data(quiz_type)
    except (ValueError, FileNotFoundError) as e:
        raise HTTPException(status_code=400, detail=str(e))
    
    total = 0
    detailed_scores: Dict[int,int] = {}
    detailed_answers: Dict[int,str] = {}

    for ans in submission.answers:
        qid = ans.question_id
        chosen_text = ans.answer

        if qid not in quiz_data:
            raise HTTPException(400, f"C√¢u h·ªèi ID={qid} kh√¥ng t·ªìn t·∫°i trong quiz '{quiz_type}'.")

        question = quiz_data[qid]
        # Ki·ªÉm tra ƒë√°p √°n h·ª£p l·ªá
        if chosen_text not in question["options"].values():
            raise HTTPException(400, f"ƒê√°p √°n kh√¥ng h·ª£p l·ªá cho c√¢u h·ªèi {qid}.")

        # L·∫•y ƒëi·ªÉm
        score = question["scores"].get(chosen_text)
        if score is None or not isinstance(score, int):
            raise HTTPException(400, f"L·ªói l·∫•y ƒëi·ªÉm cho ƒë√°p √°n c√¢u h·ªèi {qid}.")

        # Ghi nh·∫≠n
        total += score
        detailed_scores[qid] = score
        # L∆∞u l·∫°i letter A/B/C/D
        letter = next(k for k,v in question["options"].items() if v == chosen_text)
        detailed_answers[qid] = letter

    # ƒê√°nh gi√° t·ªïng th·ªÉ theo quiz type
    assessment_ranges = get_assessment_ranges(quiz_type)
    assessment = ""
    for r in assessment_ranges:
        if r["min"] <= total <= r["max"]:            
            assessment = r["assessment"]
            break

    return QuizResult(
        total_score=total,
        assessment=assessment,
        detailed_scores=detailed_scores,
        detailed_answers=detailed_answers,
        quiz_type=quiz_type
    )

@app.get("/result", response_class=HTMLResponse)
async def result_page(request: Request, score: int, assessment: str, quiz_type: str = "study"):
    return templates.TemplateResponse(
        "result.html",
        {
            "request": request, 
            "score": score, 
            "assessment": assessment,
            "quiz_type": quiz_type
        }
    )

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)